DOCKER PROJECT:
----------------
DOCKER FILE	: To create image by automation.
DOCKER COMPOSE	: To create multiple containers on single server.
DOCKER SWARM	: To create multiple containers on Multiple server.
DOCKE STACK	: Docker swarm + Docker compose

1. CREATE 3(as our wish)(1 main server and remaining workernodes) SERVERS AND INSTALL DOCKER ON ALL OF THEM & CREATE CLUSTER OF IT

yum install docker -y
systemctl start docker
systemctl status docker
docker swarm init --advertise-addr 172.31.85.110(private ip of mainserver)
docker node ls


2. INSTALLING JENKINS (MASTER)(I mean main server)

sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
amazon-linux-extras install java-openjdk11 -y 
yum install git maven jenkins -y
systemctl start jenkins.service
systemctl status jenkins.service

note:
4. GIVE PERMISSIONS ( Before executing the jenkins pipeline you need to give permissions to connect between jenkins and docker)

chmod 777 /var/run/docker.sock
systemctl daemon-reload
systemctl restart docker.service

Dockerfile, docker-compose.yml I mentioned separately use those codes.

---> In the place of variable like $img -- you need add parameters during pipeline creation based on your required names.(here i used choice parameter)
$repo ( also same you need to add in parameters) 
---> If you want to push to dockerhub-here in pipeline you need to login frist.

---> After doing the frist build , change index.html page ( I mean headings like facebook , instagram etc..) . Then do second build attaching new parameters.

PIPELINE:

pipeline {
    agent any 
    
    stages {
        stage('checkout') {
            steps {
                git 'repository you need mention here'
            }
        }
        stage('build') {
            steps {
                sh 'docker build -t $img .'
            }
        }
        stage('tag') {
            steps {
                sh 'docker tag $img $repo'
            }
        }
        stage('push') {
            steps {
                sh 'docker login -u  -p '
                sh 'docker push $repo'
            }
        }
    }
}


Take another pipeline - there execute docker-compose.yml 


5. WRITE COMPOSE FILE AND PUSH TO GITHUB

version: '3.8'
services:
  facebook:
    image: manikaku/facebook:latest
    ports:
      - "81:80"
    deploy:
      replicas: 3

  instagram:
    image: manikaku/instagram:latest
    ports:
      - "82:80"
    deploy:
      replicas: 3
